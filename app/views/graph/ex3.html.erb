<%- content_for(:head) do -%>
	<%= javascript_include_tag "http://mbostock.github.com/d3/d3.js" %>
	<%= javascript_include_tag "http://mbostock.github.com/d3/d3.layout.js" %>
	<%= javascript_include_tag "http://mbostock.github.com/d3/d3.geom.js" %>
<%- end -%>

<h1>Ex3 - grouping</h1>

<div id="a">
	<script type="text/javascript">
        var nodes2 = [
		<% @people.each_with_index do |p, index| %>
			{"name":"<%= p.name %>","group":<%= p.group.to_s %>}<% unless ((index + 1) == @people.size) %>,<%end%>
		<% end %>]
		
        var links2 = [
		<% @links.each_with_index do |l, index| %>
			{"source":<%= l.source.to_s %>,"target":<%= l.target.to_s %>,"value":<%= l.value.to_s %>}<% unless ((index + 1) == @links.size) %>,<%end%>
		<% end %>]
		 
        var w = 960, h = 600,   // svg height and width
	    dr = 4,      			// default point radius
	    off = 15,    			// cluster hull offset
	    expand = {}, 			// expanded clusters
	    net, force, hullg, hull, linkg, link, nodeg, node,
	    curve = d3.svg.line().interpolate("cardinal-closed").tension(.85),
	    fill = d3.scale.category20();

		function noop() {
		    return false;
		}
		
		function nodeid(n) {
		  return n.size ? "_g_"+n.group : n.name;
		}
		
		function linkid(l) {
		  var u = nodeid(l.source),
		      v = nodeid(l.target);
		  return u<v ? u+"|"+v : v+"|"+u;
		}
		
		function getGroup(n) {
		    return n.group;
		}
		
		// constructs the network to visualize
		function network(links2, nodes2, prev, index, expand) {
		  expand = expand || {};
		  var gm = {},    // group map
		      nm = {},    // node map
		      lm = {},    // link map
		      gn = {},    // previous group nodes
		      gc = {},    // previous group centroids
		      nodes = [], // output nodes
		      links = []; // output links
		
		  // process previous nodes for reuse or centroid calculation
		  if (prev) {
		    prev.nodes.forEach(function(n) {
		      var i = index(n), o;
		      if (n.size > 0) {
		        gn[i] = n;
		        n.size = 0;
		      } else {
		        o = gc[i] || (gc[i] = {x:0,y:0,count:0});
		        o.x += n.x;
		        o.y += n.y;
		        o.count += 1;
		      }
		    });
		  }
		
		  // determine nodes
		  for (var k=0; k<nodes2.length; ++k) {
		    var n = nodes2[k],
		        i = index(n);
		
		    if (expand[i]) {
		      // the node should be directly visible
		      nm[n.name] = nodes.length;
		      nodes.push(n);
		      if (gn[i]) {
		        // place new nodes at cluster location (plus jitter)
		        n.x = gn[i].x + Math.random();
		        n.y = gn[i].y + Math.random();
		      }
		    } else {
		      // the node is part of a collapsed cluster
		      var l = gm[i] || (gm[i]=gn[i]) || (gm[i]={group:i, size:0, nodes:[]});
		      if (l.size == 0) {
		        // if new cluster, add to set and position at centroid of leaf nodes
		        nm[i] = nodes.length;
		        nodes.push(l);
		        if (gc[i]) {
		          l.x = gc[i].x / gc[i].count;
		          l.y = gc[i].y / gc[i].count;
		        }
		      }
		      l.size += 1;
		      l.nodes.push(n);
		    }
		  }
		
		  // determine links
		  for (k = 0; k < links2.length; ++k) {
		    var e = links2[k],
		        u = index(e.source),
		        v = index(e.target);
		    u = expand[u] ? nm[e.source.name] : nm[u];
		    v = expand[v] ? nm[e.target.name] : nm[v];
		    var i = (u<v ? u+"|"+v : v+"|"+u),
		        l = lm[i] || (lm[i] = {source:u, target:v, size:0});
		    l.size += 1;
		  }
		  for (i in lm) { links.push(lm[i]); }
		
		  return {nodes: nodes, links: links};
		}
		
		function convexHulls(nodes, index, offset) {
		  var h = {};
		
		  // create point sets
		  for (var k = 0; k < nodes.length; ++k) {
		    var n = nodes[k];
		    if (n.size) continue;
		    var i = index(n),
		        l = h[i] || (h[i] = []);
		    l.push([n.x-offset, n.y-offset]);
		    l.push([n.x-offset, n.y+offset]);
		    l.push([n.x+offset, n.y-offset]);
		    l.push([n.x+offset, n.y+offset]);
		  }
		
		  // create convex hulls
		  var hulls = [];
		  for (i in h) {
		    hulls.push({group: i, path: d3.geom.hull(h[i])});
		  }
		
		  return hulls;
		}
		
		function drawCluster(d) {
		  return curve(d.path); // 0.8
		}
		
		// --------------------------------------------------------
		
		var body = d3.select("#a");
		
		var vis = body.append("svg:svg")
		   .attr("width", w)
		   .attr("height", h);
		
		
		for (var i=0; i<links2.length; ++i) {
			o = links2[i];
			o.source = nodes2[o.source];
			o.target = nodes2[o.target];
		}
			
		hullg = vis.append("svg:g");
		linkg = vis.append("svg:g");
		nodeg = vis.append("svg:g");
		
		init();
		
		vis.attr("opacity", 1e-6)
			.transition()
			.duration(1000)
			.attr("opacity", 1);

		
		function init() {
		  if (force) force.stop();
		
		  net = network(links2, nodes2, net, getGroup, expand);
		
		  force = d3.layout.force()
		      .nodes(net.nodes)
		      .links(net.links)
		      .size([w, h])
		      .linkDistance(100)
		      .start();
		
		  hullg.selectAll("path.hull").remove();
		  hull = hullg.selectAll("path.hull")
		      .data(convexHulls(net.nodes, getGroup, off))
		    .enter().append("svg:path")
		      .attr("class", "hull")
		      .attr("d", drawCluster)
		      .style("fill", function(d) { return fill(d.group); })
		      .on("dblclick", function(d) { expand[d.group] = false; init(); });
		
		  link = linkg.selectAll("line.link").data(net.links, linkid);
		  link.exit().remove();
		  link.enter().append("svg:line")
		      .attr("class", "link")
		      .attr("x1", function(d) { return d.source.x; })
		      .attr("y1", function(d) { return d.source.y; })
		      .attr("x2", function(d) { return d.target.x; })
		      .attr("y2", function(d) { return d.target.y; })
		      .style("stroke-width", function(d) { return d.size || 1; });
		
		  node = nodeg.selectAll("circle.node").data(net.nodes, nodeid);
		  node.exit().remove();
		  node.enter().append("svg:circle")
		      .attr("class", function(d) { return "node" + (d.size?"":" leaf"); })
		      .attr("r", function(d) { return d.size ? d.size + dr : dr+1; })
		      .attr("cx", function(d) { return d.x; })
		      .attr("cy", function(d) { return d.y; })
		      .style("fill", function(d) { return fill(d.group); })
		      .on("dblclick", function(d) {
		        if (d.size) { expand[d.group] = true; init(); }
		      });
		
		  node.call(force.drag);
		
		  force.on("tick", function() {
		    if (!hull.empty()) {
		      hull.data(convexHulls(net.nodes, getGroup, off))
		          .attr("d", drawCluster);
		    }
		
		    link.attr("x1", function(d) { return d.source.x; })
		        .attr("y1", function(d) { return d.source.y; })
		        .attr("x2", function(d) { return d.target.x; })
		        .attr("y2", function(d) { return d.target.y; });
		
		    node.attr("cx", function(d) { return d.x; })
		        .attr("cy", function(d) { return d.y; });
		  });
		}

	</script>
</div>
